import * as fs from 'fs';
import * as path from 'path';
import process from 'process';

const __dirname = process.cwd();

const glyphDirectories = [
    './src/icons/glyph',
    './src/icons/brand/glyph',
    './src/icons/editor/glyph',
];

/**
 * # checkMissingIconSuffix
 *
 * @param {string[]} svgFiles
 */
function checkMissingIconSuffix(svgFiles) {
    const invalidFiles = svgFiles.filter(file => {
        const baseName = path.basename(file, '.svg');
        return !baseName.endsWith('Icon') || baseName.endsWith('IconIcon');
    });
    if (invalidFiles.length) {
        console.warn('The following SVG icon files do not have a valid `Icon` suffix.', invalidFiles);
    }
}

/**
 * # generateIndex
 *
 * @param {string} directory
 * @param {string[]} svgFiles
 */
function generateIndexFromGlyphs(directory, svgFiles) {
    const iconDirectory = path.dirname(directory);
    const iconIndex = path.join(iconDirectory, 'index.ts');
    const glyph = path.basename(directory);

    const iconExports = svgFiles.map(svg => {
        const icon = path.basename(svg, '.svg');
        return `export { default as ${icon} } from "./${glyph}/${svg}";`;
    }).join("\n");

    const indexContent = `/**
    # Evance UI Icons
    
    Auto-generated by "gen:icons" based on SVGs found in the './${glyph}' directory.
    Do NOT edit this file, it will be overwritten.
*/
${iconExports}`;

    fs.writeFileSync(iconIndex, indexContent, 'utf-8');
}

for (let glyphDirectory of glyphDirectories) {
    const directory = path.resolve(__dirname, glyphDirectory);
    fs.readdir(directory, (err, files) => {
        const svgFiles = files.filter(file => path.extname(file).toLowerCase() === '.svg');
        checkMissingIconSuffix(svgFiles);
        generateIndexFromGlyphs(directory, svgFiles);
    });
}